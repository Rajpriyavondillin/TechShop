-- TASKS 2: SELECT, WHERE, BETWEEN, AND, LIKE
-- 1. Write an SQL query to retrieve the names and emails of all customers.
 select FirstName, LastName, Email from customers;

-- 2. Write an SQL query to list all orders with their order dates and corresponding customer names.
 select o.orderDate, c.FirstName, c.LastName from customers c, orders o where c.CustomerId=o.CustomerId;

-- 3. Write an SQL query to insert a new customer record into the "Customers" table.
-- Include customer information such as name, email, and address.
 insert into customers(CustomerId, FirstName, LastName, Email, Address) values (11, 'Geetha', 'Anjali', 'geethanjali@gmail.com', '88 LilyComplex');
 select * from customers;

-- 4. Write an SQL query to update the prices of all electronic gadgets in the "Products" table by increasing them by 10%.
set sql_safe_updates = 0;
update products set Price=Price+Price*.10;

-- 5. Write an SQL query to delete a specific order and its associated order details from the "Orders" and "OrderDetails" tables.
-- Allow users to input the order ID as a parameter.
set @user_input = 1000;
delete from orderdetails where OrderId= @user_input;
delete from orders where OrderId= @user_input;
select * from orders;
select * from orderdetails;

-- 6. Write an SQL query to insert a new order into the "Orders" table.
-- Include the customer ID, order date, and any other necessary information.
insert into orders(OrderId, CustomerId, orderDate, TotalAmount) values (1010, 11, '2025-06-12', NULL);
select * from orders;

-- 7. Write an SQL query to update the contact information (e.g., email and address) of a specific customer in the "Customers" table.
-- Allow users to input the customer ID and new contact information.
set @customerId = 8;
set @new_email = 'rahuldass@gmail.com';
set @new_address = '101 PineAvenue';
update customers set Email = @new_email, Address = @new_address where CustomerId = @customerId;
select * from customers;

-- 8. Write an SQL query to recalculate and update the total cost of each order in the "Orders" table based on the prices and quantities in the "OrderDetails" table.
update orders o set TotalAmount = (select sum(od.Quantity * p.Price) as TotalAmount from orderdetails od join products p on p.ProductId = od.ProductId where o.OrderId = od.OrderId);
select TotalAmount from orders;

-- 9. Write an SQL query to delete all orders and their associated order details for a specific customer from the "Orders" and "OrderDetails" tables.
set sql_safe_updates =0;
delete od from orderdetails od join orders o using(OrderId) where o.CustomerId = 8;
delete from orders where CustomerId = 8;
select * from orders;
select * from orderdetails;

-- 10. Write an SQL query to insert a new electronic gadget product into the "Products" table, including product name, category, price, and any other relevant details.
insert into products(ProductId, productName, Description, Price) values (110, 'SmartPhone', '6.5" display,128GB stodage, 5000mAh Battery', 14999);
select * from products;

-- 11. Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from "Pending" to "Shipped").
-- Allow users to input the order ID and the new status.
alter table orders add status varchar(50) default 'pending';
select * from orders;
update orders set status = 'pending' where status IS NULL;
select * from orders;
set @OrderId = 1001;
set @NewStatus = 'Shipped';
update orders set status = @NewStatus where OrderId = @OrderId;
select * from orders;

-- 12. Write an SQL query to calculate and update the number of orders placed by each customer in the "Customers" table based on the data in the "Orders" table.
alter table customers add OrderCount int default  0;
update customers c set c.OrderCount = (select count(*) from orders o where o.CustomerId=c.CustomerId);
select * from customers;





-- Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:
-- 1. Write an SQL query to retrieve a list of all orders along with customer information (e.g., customer name) for each order.
select o.OrderId, o.CustomerId, o.orderDate, o.TotalAmount, o.status, c.FirstName, c.LastName, c.Address from customers c, orders o where c.CustomerId = o.CustomerId;

-- 2. Write an SQL query to find the total revenue generated by each electronic gadget product.
-- Include the product name and the total revenue.
select p.productName, p.ProductId, sum(od.Quantity * p.Price) as Total_Revenue from products p join orderdetails od on p.ProductId = od.ProductId group by ProductId, productName;

-- 3. Write an SQL query to list all customers who have made at least one purchase.
-- Include their names and contact information.
select c.CustomerId, c.FirstName, c.LastName, c.Phone, c.Email, c.Address, o.OrderId from customers c join orders o on c.CustomerId = o.CustomerId;

-- 4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered.
-- Include the product name and the total quantity ordered.
-- select p.productName, od.Quantity from products p join orderdetails od on p.ProductId = od.ProductId order by Quantity desc limit 1;

-- 4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered.
-- Include the product name and the total quantity ordered.
select p.productName,sum(od.Quantity) as HighestTotalQuantity from products p join orderdetails od using(ProductId) group by p.productName order by HighestTotalQuantity desc limit 1;

-- 5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
alter table products add Catogories int not null;
select * from products;
alter table products modify Catogories varchar(50) not null;
select * from products;
update products set Catogories = 'Wireless' where ProductId in(100,101);
select * from products;
update products set Catogories = 'SmartDevices' where ProductId in(102,110);
update products set Catogories = 'DisplayDevices' where ProductId in(104,105);
update products set Catogories = 'Chargers' where ProductId in(103,109);
update products set Catogories = 'ElectronicAccessories' where ProductId in(108,107,106);
select productName, Catogories from products;

-- 6. Write an SQL query to calculate the average order value for each customer.
-- Include the customer's name and their average order value.
insert into orders(OrderId, CustomerId, orderDate, TotalAmount, status) values(1014, 10, '2025-01-30', null, 'Shipped'),(1013, 10, '2025-06-30', null, 'Shipped');
select * from orders;
set sql_safe_updates =0;
update orders o set TotalAmount = (select sum(od.Quantity * p.Price) as TotalAmount from orderdetails od join products p on p.ProductId = od.ProductId where o.OrderId = od.OrderId);
select * from orders;
select * from orderdetails;
select * from products;
select c.FirstName, c.LastName, avg(o.TotalAmount) as AverageOrderValues from customers c join orders o on c.CustomerId = o.CustomerId group by c.CustomerId, c.FirstName, c.LastName;

-- 7. Write an SQL query to find the order with the highest total revenue.
-- Include the order ID, customer information, and the total revenue.
select o.OrderId,c.CustomerId,c.FirstName, c.LastName, c.Email, c.Phone,c.Address,o.TotalAmount as TotalRevenue from customers c join orders o using(CustomerId)
order by TotalRevenue desc limit 1;

-- 8. Write an SQL query to list electronic gadgets and the number of times each product has been ordered.
use TechShop;
select p.productName,count(od.OrderId) as OrderCount from products p join orderdetails od using(ProductId) group by p.productName;

-- 9. Write an SQL query to find customers who have purchased a specific electronic gadget product.
-- Allow users to input the product name as a parameter.
select c.FirstName,c.LastName,p.productName from customers c join orders o using(CustomerId)
join orderdetails od using(OrderId) join products p using(ProductId) where p.productName = 'Laptop';

-- 10. Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period.
-- Allow users to input the start and end dates as parameters.
select CustomerId,sum(TotalAmount) as TotalRevenue from orders where orderDate between '2025-01-01' and '2025-12-31' group by CustomerId;


-- Task 4. Subquery and its type:
-- 1. Write an SQL query to find out which customers have not placed any orders.
select CustomerId,FirstName,LastName from customers where CustomerId not in(select CustomerId from orders);

-- 2. Write an SQL query to find the total number of products available for sale.
select (select count(*) from products) as TotalNumberOfProducts;

-- 3.  Write an SQL query to calculate the total revenue generated by TechShop.
select (select sum(TotalAmount) from orders) as TotalRevenue;

-- 4. Write an SQL query to calculate the average quantity ordered for products in a specific category.
select avg(Quantity) as AvgQuantityOrdered from orderdetails where ProductId in(select ProductId from products where Catogories='Chargers');

-- 5. Write an SQL query to calculate the total revenue generated by a specific customer.
select (select sum(TotalAmount) from orders where CustomerId=3) as TotalRevenue;
select sum(TotalAmount) as TotalRevenue from orders where CustomerId in(select CustomerId from customers where CustomerId=3);

-- 6. Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed.
select CustomerId,FirstName,LastName,(select count(*) from orders o where o.CustomerId=c.CustomerId) as OrderCount
from customers c where(select count(*) from orders o where o.CustomerId=c.CustomerId)=
(select max(OrderCount) from(select CustomerId,count(*) as OrderCount from orders group by CustomerId) as orderCount);

-- 7. Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders.
select productName from Products where ProductId = (select ProductId from OrderDetails group by ProductId having sum(Quantity)=(select max(TotalQty)
from(select ProductId, sum(Quantity) as TotalQty from OrderDetails group by ProductId) as QuantityPerProduct));

-- 8. Write an SQL query to find the customer who has spent the most money (highest total revenue) on electronic gadgets.
select c.CustomerId, c.FirstName, c.LastName, sum(od.Quantity * p.Price) as TotalSpent from customers c
join orders o using (CustomerId)
join orderdetails od using (OrderId)
join products p using (ProductId)
group by c.CustomerId, c.FirstName, c.LastName having sum(od.Quantity * p.Price) =
(select max(TotalAmount) from (select o.CustomerId, sum(od.Quantity * p.Price) as TotalAmount from orders o
        join orderdetails od using (OrderId)
        join products p using (ProductId)
        group by o.CustomerId ) as TotalRevenue);

-- 9. Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.
select(select sum(TotalAmount) / count(OrderId) from orders) as AvgOrderValue;

-- 10. Write an SQL query to find the total number of orders placed by each customer and list their names along with the order count.
select c.CustomerId,c.FirstName,c.LastName,(select count(o.OrderId) from orders o where o.CustomerId=c.CustomerId) as TotalNumberOfOrders from customers c;


/*
-- Task 4. Subquery and its type:(using joins)
-- 1. Write an SQL query to find out which customers have not placed any orders.
use TechShop;
select c.FirstName,c.LastName,c.CustomerId,o.OrderId from customers c left join orders o using(CustomerId) where o.OrderId is null;

-- 2. Write an SQL query to find the total number of products available for sale.
select count(*) as Num_Of_Products from products;

-- 3.  Write an SQL query to calculate the total revenue generated by TechShop.
select sum(TotalAmount) as TotalRevenue from orders;

-- 4. Write an SQL query to calculate the average quantity ordered for products in a specific category.
select p.Catogories,avg(od.Quantity) from products p join orderdetails od using(ProductId) where p.Catogories = 'ElectronicAccessories'group by p.Catogories;

-- 5. Write an SQL query to calculate the total revenue generated by a specific customer.
select c.CustomerId,c.FirstName,c.LastName,sum(o.TotalAmount) as TotalRevenue from customers c join orders o using(CustomerId) where c.FirstName='Rajpriya' group by c.CustomerId,c.FirstName,c.LastName;

-- 6. Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed.
select * from orders;
select * from customers;
select o.CustomerId,c.FirstName,c.LastName,c.Phone,count(o.OrderId) as OrdersPerCustomer from customers c join orders o using(CustomerId) group by o.CustomerId,c.FirstName,c.LastName order by OrdersPerCustomer desc limit 6;
update customers c set c.OrderCount=(select count(o.OrderId) from orders o where o.CustomerId=c.CustomerId);
select * from customers;

-- 7. Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders.
select * from products;
select * from orderdetails;
insert into orderdetails(OrderDetailId,OrderId,ProductId,Quantity) values (1996,1013,110,60);
select * from orderdetails;
select p.Catogories,sum(od.Quantity) as TotalQuantity from products p left join orderdetails od using(ProductId) group by p.Catogories order by TotalQuantity desc limit 1;

-- 8. Write an SQL query to find the customer who has spent the most money (highest total revenue) on electronic gadgets.
-- List their name and total spending.
select c.CustomerId,c.FirstName,c.LastName,sum(o.TotalAmount) as TotalRevenue from customers c join orders o using (CustomerId) group by c.CustomerId order by TotalRevenue desc limit 1;

-- 9. Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.
select c.CustomerId,c.FirstName,c.LastName,sum(o.TotalAmount)/count(o.OrderId) as AverageOrderValue from customers c join orders o using(CustomerId) group by c.CustomerId,c.FirstName,c.LastName;

-- 10. Write an SQL query to find the total number of orders placed by each customer and list their names along with the order count.
select CustomerId,FirstName,LastName,OrderCount from customers;
*/